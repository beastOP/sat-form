// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sat_scores.sql

package database

import (
	"context"
)

const deleteSATScore = `-- name: DeleteSATScore :exec
DELETE FROM sat_scores WHERE name = ?
`

// Delete an SAT score record by name
func (q *Queries) DeleteSATScore(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteSATScore, name)
	return err
}

const getNameBySubstring = `-- name: GetNameBySubstring :many
SELECT id, name, address, city, country, pincode, sat_score, passed, created_at, updated_at, rank FROM sat_scores
WHERE name LIKE ?
`

// Retrieve all names that contain a specific substring
func (q *Queries) GetNameBySubstring(ctx context.Context, name string) ([]SatScore, error) {
	rows, err := q.db.QueryContext(ctx, getNameBySubstring, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SatScore
	for rows.Next() {
		var i SatScore
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.City,
			&i.Country,
			&i.Pincode,
			&i.SatScore,
			&i.Passed,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSATScoreByName = `-- name: GetSATScoreByName :one
SELECT id, name, address, city, country, pincode, sat_score, passed, created_at, updated_at, rank FROM sat_scores WHERE name = ?
`

// Get a single SAT score record by name
func (q *Queries) GetSATScoreByName(ctx context.Context, name string) (SatScore, error) {
	row := q.db.QueryRowContext(ctx, getSATScoreByName, name)
	var i SatScore
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.City,
		&i.Country,
		&i.Pincode,
		&i.SatScore,
		&i.Passed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Rank,
	)
	return i, err
}

const getSATScores = `-- name: GetSATScores :many
SELECT id, name, address, city, country, pincode, sat_score, passed, created_at, updated_at, rank FROM sat_scores ORDER BY rank
`

// Get all sat scores with rank
func (q *Queries) GetSATScores(ctx context.Context) ([]SatScore, error) {
	rows, err := q.db.QueryContext(ctx, getSATScores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SatScore
	for rows.Next() {
		var i SatScore
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.City,
			&i.Country,
			&i.Pincode,
			&i.SatScore,
			&i.Passed,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Rank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSATScore = `-- name: InsertSATScore :one
INSERT INTO sat_scores (
    name, address, city, country, pincode, sat_score, passed, created_at, updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
) RETURNING id, name, address, city, country, pincode, sat_score, passed, created_at, updated_at, rank
`

type InsertSATScoreParams struct {
	Name     string `json:"name"`
	Address  string `json:"address"`
	City     string `json:"city"`
	Country  string `json:"country"`
	Pincode  string `json:"pincode"`
	SatScore int64  `json:"sat_score"`
	Passed   bool   `json:"passed"`
}

// Add a record to the sat score table
func (q *Queries) InsertSATScore(ctx context.Context, arg InsertSATScoreParams) (SatScore, error) {
	row := q.db.QueryRowContext(ctx, insertSATScore,
		arg.Name,
		arg.Address,
		arg.City,
		arg.Country,
		arg.Pincode,
		arg.SatScore,
		arg.Passed,
	)
	var i SatScore
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.City,
		&i.Country,
		&i.Pincode,
		&i.SatScore,
		&i.Passed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Rank,
	)
	return i, err
}

const updateSATScore = `-- name: UpdateSATScore :one
UPDATE sat_scores
SET sat_score = ?, 
    passed = ?, 
    updated_at = CURRENT_TIMESTAMP
WHERE name = ?
RETURNING id, name, address, city, country, pincode, sat_score, passed, created_at, updated_at, rank
`

type UpdateSATScoreParams struct {
	SatScore int64  `json:"sat_score"`
	Passed   bool   `json:"passed"`
	Name     string `json:"name"`
}

// Update an existing SAT score record
func (q *Queries) UpdateSATScore(ctx context.Context, arg UpdateSATScoreParams) (SatScore, error) {
	row := q.db.QueryRowContext(ctx, updateSATScore, arg.SatScore, arg.Passed, arg.Name)
	var i SatScore
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.City,
		&i.Country,
		&i.Pincode,
		&i.SatScore,
		&i.Passed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Rank,
	)
	return i, err
}

const updateSATScoreRanks = `-- name: UpdateSATScoreRanks :exec
UPDATE sat_scores
SET rank = (
    SELECT COUNT(*) + 1
    FROM sat_scores AS s2
    WHERE s2.sat_score > sat_scores.sat_score
)
`

// Update the rank for all sat scores
func (q *Queries) UpdateSATScoreRanks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateSATScoreRanks)
	return err
}
